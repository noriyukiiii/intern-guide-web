"use server"

import { db } from "@/lib/db";
import { hashSync } from "bcryptjs";
import { randomBytes } from "crypto";
import { revalidatePath } from "next/cache";
import { z } from "zod";

// ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠ Schema ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Prisma
const signUpAdminSchema = z.object({
  email: z.string().email("‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"),
  password: z.string().min(6, "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"),
  firstName: z.string().min(2, "‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"),
  lastName: z.string().min(2, "‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"),
  telephone: z.string().min(9, "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 9 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"),
});

export async function signUpAdminAction(
  values: z.infer<typeof signUpAdminSchema>
): Promise<{ success: boolean; message: string }> {
  try {
    console.log("üõ† ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°:", values);

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const validation = signUpAdminSchema.safeParse(values);
    if (!validation.success) {
      console.error("‚ùå Validation Error:", validation.error.format());
      return {
        success: false,
        message: "Bad Request",
      };
    }

    const { email, password, firstName, lastName, telephone } = validation.data;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingUser = await db.user.findUnique({ where: { email } });
    if (existingUser) {
      return {
        success: false,
        message: "User already exists",
      };
    }

    // ‚úÖ ‡πÅ‡∏Æ‡∏ä‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    const hashedPassword = hashSync(password, 10);
    console.log("üîë Hashed Password:", hashedPassword);

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Admin
    await db.user.create({
      data: {
        email,
        password: hashedPassword,
        firstName,
        lastName,
        phone: telephone,
        studentId: "",
        image: "/userimage/admin.png",
        role: "ADMIN", // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ role ‡πÄ‡∏õ‡πá‡∏ô ADMIN
        emailVerified: true,
      },
    });

    // ‚úÖ ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î path ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    revalidatePath("/admin/user-list");

    return {
      success: true,
      message: "Admin registered successfully.",
    };
  } catch (error) {
    console.error("üî• Error:", error);
    return {
      success: false,
      message: "Internal Server Error",
    };
  }
}
